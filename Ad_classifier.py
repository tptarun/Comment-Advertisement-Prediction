# -*- coding: utf-8 -*-
"""Ad_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H06ha48xy9_eE_mVfjrACSlwHIGzCt2t

###Importing libraries
"""

import numpy as np
import pandas as pd

"""### Importing dataset(train data)



"""

dataset_train = pd.read_csv('./train.csv')
dataset_train.shape

dataset_train = dataset_train.drop(['COMMENT_ID','AUTHOR', 'DATE'], axis = 1)

dataset_train.head()

"""### Data cleaning(train data)"""

import re
import nltk

nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

all_stopwords = stopwords.words('english')
all_stopwords.remove('not')

corpus=[]

for i in range(0, 1157):
  review = re.sub('[^a-zA-Z]', ' ', dataset_train['CONTENT'][i])
  review = review.lower()
  review = review.split()
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

"""### Data transformation(train data)"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)

X = cv.fit_transform(corpus).toarray()
y = dataset_train.iloc[:, -1].values

"""### Dividing dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

"""### Model fitting (Naive Bayes)"""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

"""###Model performance"""

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)

accuracy_score(y_test, y_pred)



"""###Importing test dataset """

dataset = pd.read_csv('./test.csv')
dataset = dataset.drop(['COMMENT_ID', 'AUTHOR', 'DATE'], axis = 1)
dataset.shape

"""###Data cleaning(test data)"""

import re
import nltk

nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

all_stopwords = stopwords.words('english')
all_stopwords.remove('not')

corpus=[]

for i in range(0, 799):
  review = re.sub('[^a-zA-Z]', ' ', dataset['CONTENT'][i])
  review = review.lower()
  review = review.split()
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

"""###Data transformation(test data)"""

X_fresh = cv.transform(corpus).toarray()
X_fresh.shape

"""###Predictions (via sentiment classifier)"""

y_pred = classifier.predict(X_fresh)
print(y_pred)

dataset['CLASS'] = y_pred.tolist()
dataset = dataset.drop(['CONTENT'], axis= 1)
dataset.head()

dataset.to_csv("./Ad_test_predictions.tsv", sep='\t', encoding='UTF-8', index=False)

